<%
  const imports = props.imports

  console.log(imports);
  
  const interfaces = props.interfaces
  const types = props.types
  const methods = props.methods
  const annotations = props.annotations
  const extendss = props.extends
  const implementss = props.implements

  function makeGeneric(generic) {
    const name = `${generic.name}${generic.generics.length > 0 ? '<' + generic.generics.map(makeGeneric).join(',') + '>' : ''}`
    return name
  }
 
  imports.forEach(imp => {
%>
import { <%= imp.imports.join(', ') %> } from '<%= imp.from %>'<%})%>

<%
  interfaces.forEach(inter => {
    if(inter.export) {%>export <%}%>interface <%= inter.pattern %> { }
<%})%>
<%
  types.forEach(type => {
    let result = type.receive.map(makeGeneric).join(' &') + ' &'

    if(result.trim() === '&') result = ''

    if(type.export) {%>export <%}%>type <%= type.pattern %> = <%- result %> {}
<%})%>
<% annotations.forEach(annotation => {%>@<%= annotation %>()<%})%>
export class <%= props.name %> <% 
  if(extendss.length > 0) { %>extends <%- extendss.map(makeGeneric).join(' ,') %> <%}
  if(implementss.length > 0) { %>implements <%- implementss.map(makeGeneric).join(' ,') %> <%}
%>{
  constructor() {}

  <% methods.forEach(mth => {
    let annotation = ''
    let method = ''

    function makeMethodProperty(pr) {
      let property = ''

      if(pr.annotation) property = `@${pr.annotation}() `

      property = `${property}${pr.name}: ${pr.type.map(makeGeneric).join(' &')}`

      return property
    }

    mth.annotations.forEach(ant => {
      annotation = `@${ant}();${annotation}`
    })

    if(mth.returns.type[0]?.name.toLocaleLowerCase() === 'promise') {
      method = 'async '
    }

    method = `${method}${mth.name} (${mth.properties.map(makeMethodProperty)})${mth.returns.type.length > 0 ? ':' : ''} ${mth.returns.type.map(makeGeneric).join(' &')} {}`

  %>
  <%- annotation %>
  <%- method %><%
  })%>
}


